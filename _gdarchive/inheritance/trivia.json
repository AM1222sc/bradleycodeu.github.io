[
{
"answer": "p5js",
"question": "a JavaScript library based on the Processing language that was created to make coding accessible for artists, designers, educators, and beginners"
},
{
"answer": "JavaScript",
"question": "a programming language created to add dynamic behavior, store information, and handle requests and responses on a webpage. Along with HTML and CSS, it is one of the three core languages of the Web."
},
{
"answer": "ES6",
"question": "also known as ECMAScript 6, ECMAScript 2015, or JavaScript 6 was finalized in June 2015. This update added significant new syntax for writing complex applications, including class declarations, block scoped variables, and constants"
},
{
"answer": "abstraction",
"question": "representing essential features without including complex details. Allows programmers to implement efficient models of complicated real-world entities/items."
},
{
"answer": "parent class",
"question": "also known as a superclass, a class that passes on its instance variables and methods to its children. More generic than it's child classes."
},
{
"answer": "superclass",
"question": "also known as a parent class, a class that passes on its instance variables and methods to its children. More generic than it's child classes."
},
{
"answer": "extends",
"question": "p5js keyword used when creating a child class"
},
{
"answer": "child class",
"question": "also known as a subclass, a class that contains all the features of the parent class, but may have new features added or redefine existing features. More specialized than the parent class."
},
{
"answer": "subclass",
"question": "also known as a child class, a class that contains all the features of the parent class, but may have new features added or redefine existing features. More specialized than the parent class"
},
{
"answer": "super()",
"question": "the p5js super class constructor. Used within the child class's constructor, it creates an object of the parent class"
},
{
"answer": "inheritance",
"question": "the relationship in which one class is based on another class while passing on instance variables and methods"
},
{
"answer": "is-a",
"question": "the relationship between parent and child classes. For example, if Vehicle is the parent class and Truck is the child class, then Truck _____ Vehicle"
},
{
"answer": "containment",
"question": "the relationship in which an object of one class includes an instance of an object from another class. For example, the Robot class contains four Arm objects."
},
{
"answer": "has-a",
"question": "the relationship where one object belongs to another object. For example, if a Radio object is an instance variable within the Truck class, then Truck _____ Radio"
},
{
"answer": "modulo",
"question": "a mathematical operation that finds the remainder after division"
},
{
"answer": "object-oriented programming",
"question": "an approach to programming centered on simulating/modeling real-world entities with both attributes and behaviors. Its three pillars include encapsulation, inheritance, and polymorphism"
},
{
"answer": "object",
"question": "a data structure that contains attributes and behaviors. A software simulation/model representing an entity either physical (a box, a car, etc) or conceptual (a chemical process, a sale, driving directions, etc)"
},
{
"answer": "class",
"question": "a blueprint for creating objects with common attributes and behaviors"
},
{
"answer": "attribute",
"question": "a property that describes the state of an object. Also known as an instance variable. For example, xLocation, yLocation, color, speed."
},
{
"answer": "instance variable",
"question": "a property that describes the state of an object. Also known as an attribute. For example, xLocation, yLocation, color, speed."
},
{
"answer": "behavior",
"question": "a method that either determines how an object acts, is changed, or provides information about its state."
},
{
"answer": "method",
"question": "a function that belongs to a class"
},
{
"answer": "this",
"question": " a keyword that refers to a specific instance of a class rather than referring to a global variable"
},
{
"answer": "constructor",
"question": "a method of a class that initializes an object of that type"
},
{
"answer": "instantiate",
"question": "the creation of an object (an instance) from a class"
},
{
"answer": "instance",
"question": "an object created from a class"
},
{
"answer": "getter",
"question": "a method that fetches private data that is stored within an object. Also known as an accessor."
},
{
"answer": "accessor",
"question": "a method that fetches private data that is stored within an object. Also known as a getter."
},
{
"answer": "setter",
"question": "a method used to control changes to an object's internal state. Also known as a mutator."
},
{
"answer": "mutator",
"question": "a method used to control changes to an object's internal state. Also known as a setter."
},
{
"answer": "argument",
"question": "a value that is passed into a method call from outside of the method."
},
{
"answer": "parameter",
"question": "a variable that is required by a method definition and used inside the method code."
},
{
"answer": "finite state machine",
"question": "a hardware or software device that has multiple modes and that it can be in only one mode at a time. For example, a traffic light can be red, yellowTurningGreen, green, and yellowTurningRed"
},
{
"answer": "game state",
"question": "the concept that a game consists of multiple scenes and that it can only be in one scene at a time. For example, titleScreen, inGame, loseScreen, and winScreen"
},
{
"answer": "edge case",
"question": "a problem or situation that occurs at minimum and maximum values of a conditional. For example, an issue with bouncing off of the screen boundaries."
},
{
"answer": "encapsulation",
"question": " the concept of combining data attributes and behaviors into one object"
},
{
"answer": "polymorphism",
"question": "being able to use objects from multiple classes in the same way because the classes use the same method names. For example, if all classes have a move method and a show method."
},
{
"answer": "p5js",
"question": "a JavaScript library based on the Processing language that was created to make coding accessible for artists, designers, educators, and beginners"
},
{
"answer": "JavaScript",
"question": "a programming language created to add dynamic behavior, store information, and handle requests and responses on a webpage. Along with HTML and CSS, it is one of the three core languages of the Web."
},
{
"answer": "ES6",
"question": "also known as ECMAScript 6, ECMAScript 2015, or JavaScript 6 was finalized in June 2015. This update added significant new syntax for writing complex applications, including class declarations, block scoped variables, and constants"
},
{
"answer": "abstraction",
"question": "representing essential features without including complex details. Allows programmers to implement efficient models of complicated real-world entities/items."
},
{
"answer": "parent class",
"question": "also known as a superclass, a class that passes on its instance variables and methods to its children. More generic than it's child classes."
},
{
"answer": "superclass",
"question": "also known as a parent class, a class that passes on its instance variables and methods to its children. More generic than it's child classes."
},
{
"answer": "extends",
"question": "p5js keyword used when creating a child class"
},
{
"answer": "child class",
"question": "also known as a subclass, a class that contains all the features of the parent class, but may have new features added or redefine existing features. More specialized than the parent class."
},
{
"answer": "subclass",
"question": "also known as a child class, a class that contains all the features of the parent class, but may have new features added or redefine existing features. More specialized than the parent class"
},
{
"answer": "super()",
"question": "the p5js super class constructor. Used within the child class's constructor, it creates an object of the parent class"
},
{
"answer": "inheritance",
"question": "the relationship in which one class is based on another class while passing on instance variables and methods"
},
{
"answer": "is-a",
"question": "the relationship between parent and child classes. For example, if Vehicle is the parent class and Truck is the child class, then Truck _____ Vehicle"
},
{
"answer": "containment",
"question": "the relationship in which an object of one class includes an instance of an object from another class. For example, the Robot class contains four Arm objects."
},
{
"answer": "has-a",
"question": "the relationship where one object belongs to another object. For example, if a Radio object is an instance variable within the Truck class, then Truck _____ Radio"
},
{
"answer": "modulo",
"question": "a mathematical operation that finds the remainder after division"
},
{
"answer": "object-oriented programming",
"question": "an approach to programming centered on simulating/modeling real-world entities with both attributes and behaviors. Its three pillars include encapsulation, inheritance, and polymorphism"
},
{
"answer": "object",
"question": "a data structure that contains attributes and behaviors. A software simulation/model representing an entity either physical (a box, a car, etc) or conceptual (a chemical process, a sale, driving directions, etc)"
},
{
"answer": "class",
"question": "a blueprint for creating objects with common attributes and behaviors"
},
{
"answer": "attribute",
"question": "a property that describes the state of an object. Also known as an instance variable. For example, xLocation, yLocation, color, speed."
},
{
"answer": "instance variable",
"question": "a property that describes the state of an object. Also known as an attribute. For example, xLocation, yLocation, color, speed."
},
{
"answer": "behavior",
"question": "a method that either determines how an object acts, is changed, or provides information about its state."
},
{
"answer": "method",
"question": "a function that belongs to a class"
},
{
"answer": "this",
"question": " a keyword that refers to a specific instance of a class rather than referring to a global variable"
},
{
"answer": "constructor",
"question": "a method of a class that initializes an object of that type"
},
{
"answer": "instantiate",
"question": "the creation of an object (an instance) from a class"
},
{
"answer": "instance",
"question": "an object created from a class"
},
{
"answer": "getter",
"question": "a method that fetches private data that is stored within an object. Also known as an accessor."
},
{
"answer": "accessor",
"question": "a method that fetches private data that is stored within an object. Also known as a getter."
},
{
"answer": "setter",
"question": "a method used to control changes to an object's internal state. Also known as a mutator."
},
{
"answer": "mutator",
"question": "a method used to control changes to an object's internal state. Also known as a setter."
},
{
"answer": "argument",
"question": "a value that is passed into a method call from outside of the method."
},
{
"answer": "parameter",
"question": "a variable that is required by a method definition and used inside the method code."
},
{
"answer": "finite state machine",
"question": "a hardware or software device that has multiple modes and that it can be in only one mode at a time. For example, a traffic light can be red, yellowTurningGreen, green, and yellowTurningRed"
},
{
"answer": "game state",
"question": "the concept that a game consists of multiple scenes and that it can only be in one scene at a time. For example, titleScreen, inGame, loseScreen, and winScreen"
},
{
"answer": "edge case",
"question": "a problem or situation that occurs at minimum and maximum values of a conditional. For example, an issue with bouncing off of the screen boundaries."
},
{
"answer": "encapsulation",
"question": " the concept of combining data attributes and behaviors into one object"
},
{
"answer": "polymorphism",
"question": "being able to use objects from multiple classes in the same way because the classes use the same method names. For example, if all classes have a move method and a show method."
}
]
